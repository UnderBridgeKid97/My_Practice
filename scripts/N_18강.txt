<오늘의 목표> - Image  (UI) - 활용
HeathBar 구현하기
Fade In/Out 효과 구현하기 - 씬 변경시

<오늘의 과제> 
1. Enemy HeathBar UI 구성 및 기능구현
- 카메라를 바라 보는 기능하는 스크립트 구현

2. Scene Fader Ui 구성
- 검정색 이미지 한장.. (FaderImage)

3. FadeIn, FadeOut 기능 구현 
- 1초동안 : 페이드인   ( a:1 -> a:0)
  효과: FaderImage를 검정에서 완전 투명하게 알파값을 조정    
- 씬 처음 불러올때 FadeIn 구현

4. 1초동안 : 페이드아웃 (a:0 -> a:1)
  효과: FaderImage를 투명에서 완전 검정으로 알파값을 조정

5. 다른 씬으로 이동시 FadeOut 효과 후 LoadScene 으로 이동


<필요 스킬>
1. Image - fillAmount

<샘플>
1. 스킬버튼 클릭 : 스킬 사용
Debug.Log("스킬 사용");
2. 스킬 쿨 타임(5초) 작동 : 스킬을 한번 사용하면 일정시간(5초)동안 사용하지 못함
3. 쿨 타임 동안 버튼 클릭(기능) 안됨
4. 쿨 타임 동안 fillAmout 로 버튼 이미지 360도 채우기
5. 쿨 타임이 지나면 버튼 클릭 가능













////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Enemy : MonoBehaviour
{
    //Enemy의 이동속도    
    [HideInInspector]
    public float moveSpeed;
    public float startSpeed = 10f;
    //Enemy HP
    private float health;
    public float startHealth = 100;
    //보상금
    public int rewardGold = 50;
    //death 이펙트
    public GameObject deathEffectPrefab;
    //HpBar 이미지
    public Image healthBar;


    private void Start()
    {
        moveSpeed = startSpeed;
        health = startHealth;
    }

    //속도를 늦춘다
    public void SlowSpeed(float pct)
    {
        moveSpeed = startSpeed * (1f - pct);
    }
    /*
    40% 감속 : startSpeed * (1f - 0.4f)
    40% 속도 : startSpeed * 0.4f
    공격력 40% 감소     : attack * (1f - 0.4f) -> 0.6
    공격력의 40%로 적용 : attack * 0.4         -> 0.4
    */

    //데미지 계산한다
    public void TakeDamage(float damage)
    {
        health -= damage;

        //hp 게이지 조정
        healthBar.fillAmount = health / startHealth;

        if (health <= 0)
        {
            Death();
        }
    }

    //kill 처리
    private void Death()
    {
        //보상금 지급
        PlayerStats.AddMoney(rewardGold);

        //death 이펙트
        GameObject eff = (GameObject)Instantiate(deathEffectPrefab, transform.position, Quaternion.identity);
        Destroy(eff, 3f);

        //Enemy 오브젝트 킬
        Destroy(gameObject);
    }

}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LookAtCamera : MonoBehaviour
{
    Camera m_MainCamera;

    private void Start()
    {
        m_MainCamera = Camera.main;
    }

    void Update()
    {
        // Rotate the camera every frame so it keeps looking at the target 
        transform.LookAt(m_MainCamera.transform);
    }
}
/*
public class LookAtCamera : MonoBehaviour
{
    Camera m_MainCamera;
    Vector3 startRotation;

    private void Start()
    {
        m_MainCamera = Camera.main;
        startRotation = transform.rotation.eulerAngles;
    }

    void Update()
    {
        // Rotate the camera every frame so it keeps looking at the target 
        //transform.LookAt(m_MainCamera.transform);
        Vector3 dir = m_MainCamera.transform.position - transform.position;
        Quaternion quaternion = Quaternion.LookRotation(dir);
        transform.rotation = Quaternion.Euler(new Vector3(quaternion.eulerAngles.x, startRotation.y, startRotation.z));
    }
}*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
