<오늘의 목표> 캐릭터 컨트롤러

[샘플 프로젝트 생성]

<Sample> 1인칭 - First Person Controller 

1.  캐릭터 이동 컨트롤 : 
  - 좌우 화살표, A,D 키를 누르면 플레이어가 좌우로 이동한다
  - 상하 화살표, W,S 키를 누르면 플레이어가 앞뒤로 이동한다
  - 캐릭터 이동을 CharacterController 컴포넌트 이용해서 구현

2. 캐릭터 점프
  - 중력 구현 
  - 지면 체크
  - 스페이스 키를 누르면 플레이어가 점프한다

3.  캐릭터 시야 컨트롤
  - 마우스의 좌우를 움직이면 플레이어 오브젝트를 좌우로 회전시킨다
    마우스의 좌우 입력받아 플레이어 오브젝트 회전
  - 마우스의 상하를 움직이면 카메라 오브젝트를 상하로 회전시킨다
    마우스의 상하 입력받아 카메라 오브젝트 회전


<필요 스킬>
1. Input.GetAxis(); 
2. CharacterController : 충돌체 + 이동

========================================================
PlayerMove -> 

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace MySample
{
    public class PlayerMove : MonoBehaviour
    {
        #region Variables
        // 캐릭터 컨트롤러
        private CharacterController controller;

        // 이동 속도
        [SerializeField] private float moveSpeed = 10f;

        //중력 가속도
        [SerializeField] private float gravity = -9.81f;
        //플레이어의 속도 - 중력만 적용
        [SerializeField] private Vector3 velocity;
        //그라운드 체크
        [SerializeField] private bool isGround = false;

        //점프
        [SerializeField] private float jumpHeight = 1f;
        #endregion

        private void Start()
        {
            controller = GetComponent<CharacterController>();
        }

        private void Update()
        {
            //그라운드 체크
            isGround = controller.isGrounded;
            if(isGround && velocity.y < 0f)
            {
                velocity.y = 0;
            }

            // 이동
            Move();

            //점프
            if (Input.GetKeyDown(KeyCode.Space) && isGround)
            {
                Jump();
            }

            //중력 가속도
            velocity.y += gravity * Time.deltaTime;
            controller.Move(velocity * Time.deltaTime);
        }

        private void Move()
        {
            // 이동
            float moveX = Input.GetAxis("Horizontal");
            float moveY = Input.GetAxis("Vertical");
            Vector3 move = transform.right * moveX + transform.forward * moveY;

            controller.Move(move * Time.deltaTime * moveSpeed);
        }

        private void Jump()
        {
            velocity.y = Mathf.Sqrt(jumpHeight * -3.0f * gravity);
        }
    }
}

/*
캐릭터 컨트롤 : 이동 + 충돌 체크
- 빌트인 Character Controller : Character Controller + Collider
  . 이동
  . 그라운드 체크
  . 충돌 체크
  . 계단
  . 경사면

- Rigidibody : 다이나믹
- Rigidbody : 키네마틱
*/


















